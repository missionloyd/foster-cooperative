{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useReducer } from 'react';\nimport Popover from '@material-ui/core/Popover';\nimport SearchBar from './SearchBar';\nimport Item from './Item';\nimport Box from '@material-ui/core/Box'; // Initial State And Reducer Function\n\nconst initialState = {\n  isLoading: true,\n  data: [],\n  search: '',\n  searchData: []\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: action.payload,\n        isLoading: false\n      });\n\n    case 'SEARCH_INPUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        search: action.payload\n      });\n\n    case 'SEARCH_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        searchData: action.payload\n      });\n\n    default:\n      throw new Error();\n  }\n}; // The Component\n\n\nconst GlobalSearchBar = props => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initialState);\n  const [anchorEl, setAnchorEl] = React.useState(null); // Async Fetch\n\n  const fetchData = async url => {\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      dispatch({\n        type: 'SET_DATA',\n        payload: data\n      });\n    } catch (err) {\n      console.log('Error:', err);\n    }\n  };\n\n  useEffect(() => {\n    fetchData('https://jsonplaceholder.typicode.com/posts');\n  }, []); // Search And Highlight Function\n\n  const handleInput = e => {\n    let str = e.target.value;\n    dispatch({\n      type: 'SEARCH_INPUT',\n      payload: str\n    });\n    const newArr = state.data.filter(item => item.title.toLowerCase().includes(str.toLowerCase()) || item.body.toLowerCase().includes(str.toLowerCase())).map(item => {\n      let newTitle = item.title.replace(new RegExp(str, 'gi'), match => `<mark style=\"background: #2769AA; color: white;\">${match}</mark>`);\n      let newBody = item.body.replace(new RegExp(str, 'gi'), match => `<mark style=\"background: #2769AA; color: white;\">${match}</mark>`);\n      return _objectSpread(_objectSpread({}, item), {}, {\n        title: newTitle,\n        body: newBody\n      });\n    });\n    dispatch({\n      type: 'SEARCH_DATA',\n      payload: newArr\n    });\n    handleOpen(e);\n  };\n\n  const handleOpen = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'popover' : undefined; // Return Statement\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(SearchBar, {\n      onInput: e => handleInput(e),\n      classes: props.classes\n    }), /*#__PURE__*/_jsx(Popover, {\n      id: id,\n      open: open //state.searchData > \"0\"\n      ,\n      hidden: !(state.search.length > 2),\n      disableAutoFocus: true,\n      onKeyDown: handleClose,\n      anchorEl: anchorEl,\n      style: {\n        marginTop: \"2.5rem\"\n      },\n      onClick: handleClose,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'center'\n      },\n      transformOrigin: {\n        vertical: 'bottom',\n        horizontal: 'center'\n      },\n      children: /*#__PURE__*/_jsx(Box, {\n        p: 1,\n        children: state.isLoading ? /*#__PURE__*/_jsx(\"p\", {\n          children: \"Loading...\"\n        }) : state.search.length > 2 && state.searchData > \"0\" ? state.searchData.map(post => /*#__PURE__*/_jsx(Item, {\n          user: post.userId,\n          title: post.title,\n          body: post.body\n        }, post.id)) : /*#__PURE__*/_jsx(Item, {\n          user: \"System\",\n          title: \"No results Found...\"\n        }, id)\n      })\n    })]\n  });\n};\n\nexport default GlobalSearchBar;","map":null,"metadata":{},"sourceType":"module"}