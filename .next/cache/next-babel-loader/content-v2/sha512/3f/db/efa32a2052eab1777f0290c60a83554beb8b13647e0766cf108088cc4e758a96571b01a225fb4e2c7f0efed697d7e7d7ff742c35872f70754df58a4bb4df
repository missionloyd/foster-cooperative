{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport Paper from '@material-ui/core/Paper'; //import TableCell from '@material-ui/core/TableCell';\n\nimport { darken, fade, lighten } from '@material-ui/core/styles/colorManipulator'; //import Typography from '@material-ui/core/Typography';\n\nimport { ViewState, EditingState } from '@devexpress/dx-react-scheduler'; //import classNames from 'clsx';\n\nimport { Scheduler, MonthView, Appointments, Toolbar, DateNavigator, AppointmentTooltip, AppointmentForm, EditRecurrenceMenu, Resources, DragDropProvider, ConfirmationDialog } from '@devexpress/dx-react-scheduler-material-ui'; //import ColorLens from '@material-ui/icons/ColorLens';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport { owners } from '../../demo/demo-data/tasks';\nimport { appointments } from '../../demo/demo-data/tasks';\nconst resources = [{\n  fieldName: 'ownerId',\n  title: 'Owners',\n  instances: owners\n}];\n\nconst getBorder = theme => `1px solid ${theme.palette.type === 'light' ? lighten(fade(theme.palette.divider, 1), 0.88) : darken(fade(theme.palette.divider, 1), 0.68)}`;\n\nconst DayScaleCell = props => /*#__PURE__*/_jsx(MonthView.DayScaleCell, _objectSpread(_objectSpread({}, props), {}, {\n  style: {\n    textAlign: 'center',\n    fontWeight: 'bold'\n  }\n}));\n\nconst styles = theme => ({\n  cell: {\n    color: '#78909C!important',\n    position: 'relative',\n    userSelect: 'none',\n    verticalAlign: 'top',\n    padding: 0,\n    height: 100,\n    borderLeft: getBorder(theme),\n    '&:first-child': {\n      borderLeft: 'none'\n    },\n    '&:last-child': {\n      paddingRight: 0\n    },\n    'tr:last-child &': {\n      borderBottom: 'none'\n    },\n    '&:hover': {\n      backgroundColor: fade('#03B0b5', 0.15)\n    },\n    '&:focus': {\n      backgroundColor: fade('#03B0b5', 0.30),\n      outline: 0\n    }\n  },\n  content: {\n    display: 'flex',\n    justifyContent: 'center',\n    width: '100%',\n    height: '100%',\n    position: 'absolute',\n    alignItems: 'center'\n  },\n  text: {\n    padding: '0.5em',\n    textAlign: 'center'\n  },\n  opacity: {\n    opacity: '0.5'\n  },\n  appointment: {\n    borderRadius: '10px',\n    '&:hover': {\n      opacity: 0.6\n    }\n  },\n  apptContent: {\n    '&>div>div': {\n      whiteSpace: 'normal !important',\n      lineHeight: 1.2\n    }\n  },\n  flexibleSpace: {\n    flex: 'none'\n  },\n  flexContainer: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  tooltipContent: {\n    padding: theme.spacing(3, 1),\n    paddingTop: 0,\n    backgroundColor: theme.palette.background.paper,\n    boxSizing: 'border-box',\n    width: '400px'\n  },\n  tooltipText: _objectSpread(_objectSpread({}, theme.typography.body2), {}, {\n    display: 'inline-block'\n  }),\n  title: _objectSpread(_objectSpread({}, theme.typography.h6), {}, {\n    color: theme.palette.text.secondary,\n    fontWeight: theme.typography.fontWeightBold,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap'\n  }),\n  icon: {\n    color: theme.palette.action.active,\n    verticalAlign: 'middle'\n  },\n  circle: {\n    width: theme.spacing(4.5),\n    height: theme.spacing(4.5),\n    verticalAlign: 'super'\n  },\n  textCenter: {\n    textAlign: 'center'\n  },\n  dateAndTitle: {\n    lineHeight: 1.1\n  },\n  titleContainer: {\n    paddingBottom: theme.spacing(2)\n  },\n  container: {\n    paddingBottom: theme.spacing(1.5)\n  }\n}); // #FOLD_BLOCK\n// const CellBase = React.memo(({\n//   classes,\n//   startDate,\n//   formatDate,\n//   otherMonth,\n//   // #FOLD_BLOCK\n// }) => {\n//   //const iconId = Math.abs(Math.floor(Math.sin(startDate.getDate()) * 10) % 3);\n//   const isFirstMonthDay = startDate.getDate() === 1;\n//   const formatOptions = isFirstMonthDay\n//     ? { day: 'numeric', month: 'long' }\n//     : { day: 'numeric' };\n//   return (\n//     <TableCell\n//       tabIndex={0}\n//       className={classNames({\n//         [classes.cell]: true,\n//         [classes.opacity]: otherMonth,\n//       })}\n//     >\n//       <div className={classes.text}>\n//         {formatDate(startDate, formatOptions)}\n//       </div>\n//     </TableCell>\n//   );\n// });\n// const TimeTableCell = withStyles(styles, { name: 'Cell' })(CellBase);\n\n\nconst BooleanEditor = props => {\n  return /*#__PURE__*/_jsx(AppointmentForm.BooleanEditor, _objectSpread(_objectSpread({}, props), {}, {\n    readOnly: true\n  }));\n};\n\nconst Appointment = withStyles(styles, {\n  name: 'Appointment'\n})((_ref) => {\n  let {\n    classes\n  } = _ref,\n      restProps = _objectWithoutProperties(_ref, [\"classes\"]);\n\n  return /*#__PURE__*/_jsx(Appointments.Appointment, _objectSpread(_objectSpread({}, restProps), {}, {\n    className: classes.appointment\n  }));\n});\nconst AppointmentContent = withStyles(styles, {\n  name: 'AppointmentContent'\n})((_ref2) => {\n  let {\n    classes\n  } = _ref2,\n      restProps = _objectWithoutProperties(_ref2, [\"classes\"]);\n\n  return /*#__PURE__*/_jsx(Appointments.AppointmentContent, _objectSpread(_objectSpread({}, restProps), {}, {\n    className: classes.apptContent\n  }));\n});\nconst FlexibleSpace = withStyles(styles, {\n  name: 'ToolbarRoot'\n})((_ref3) => {\n  let {\n    classes\n  } = _ref3,\n      restProps = _objectWithoutProperties(_ref3, [\"classes\"]);\n\n  return /*#__PURE__*/_jsx(Toolbar.FlexibleSpace, _objectSpread(_objectSpread({}, restProps), {}, {\n    className: classes.flexibleSpace,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: classes.flexContainer,\n      children: /*#__PURE__*/_jsx(\"h1\", {\n        children: \"Community Calendar\"\n      })\n    })\n  }));\n});\nexport default class Calendar extends React.PureComponent {\n  // #FOLD_BLOCK\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: appointments,\n      currentDate: '2018-07-17',\n      addedAppointment: {},\n      appointmentChanges: {},\n      editingAppointment: undefined\n    };\n    this.commitChanges = this.commitChanges.bind(this);\n    this.changeAddedAppointment = this.changeAddedAppointment.bind(this);\n    this.changeAppointmentChanges = this.changeAppointmentChanges.bind(this);\n    this.changeEditingAppointment = this.changeEditingAppointment.bind(this);\n  }\n\n  changeAddedAppointment(addedAppointment) {\n    this.setState({\n      addedAppointment\n    });\n  }\n\n  changeAppointmentChanges(appointmentChanges) {\n    this.setState({\n      appointmentChanges\n    });\n  }\n\n  changeEditingAppointment(editingAppointment) {\n    this.setState({\n      editingAppointment\n    });\n  } // #FOLD_BLOCK\n\n\n  commitChanges({\n    added,\n    changed,\n    deleted\n  }) {\n    this.setState(state => {\n      let {\n        data\n      } = state;\n\n      if (added) {\n        const startingAddedId = data.length > 0 ? data[data.length - 1].id + 1 : 0;\n        data = [...data, _objectSpread({\n          id: startingAddedId\n        }, added)];\n      }\n\n      if (changed) {\n        data = data.map(appointment => changed[appointment.id] ? _objectSpread(_objectSpread({}, appointment), changed[appointment.id]) : appointment);\n      }\n\n      if (deleted !== undefined) {\n        data = data.filter(appointment => appointment.id !== deleted);\n      }\n\n      return {\n        data\n      };\n    });\n  }\n\n  render() {\n    const {\n      currentDate,\n      data,\n      addedAppointment,\n      appointmentChanges,\n      editingAppointment\n    } = this.state;\n    return /*#__PURE__*/_jsx(Paper, {\n      value: \"\",\n      children: /*#__PURE__*/_jsxs(Scheduler, {\n        data: data,\n        children: [/*#__PURE__*/_jsx(ViewState, {\n          defaultCurrentDate: currentDate\n        }), /*#__PURE__*/_jsx(EditingState, {\n          onCommitChanges: this.commitChanges,\n          addedAppointment: addedAppointment,\n          onAddedAppointmentChange: this.changeAddedAppointment,\n          appointmentChanges: appointmentChanges,\n          onAppointmentChangesChange: this.changeAppointmentChanges,\n          editingAppointment: editingAppointment,\n          oneditingappointmentchange: this.changeeditingappointment\n        }), /*#__PURE__*/_jsx(MonthView, {\n          title: \"month\",\n          selectedDateFormat: \"{0:M}\",\n          selectedShortDateFormat: \"{0:M}\",\n          dayScaleCellComponent: DayScaleCell\n        }), /*#__PURE__*/_jsx(Toolbar, {\n          flexibleSpaceComponent: FlexibleSpace\n        }), /*#__PURE__*/_jsx(DateNavigator, {}), /*#__PURE__*/_jsx(EditRecurrenceMenu, {\n          value: \"1\"\n        }), /*#__PURE__*/_jsx(ConfirmationDialog, {}), /*#__PURE__*/_jsx(Appointments, {\n          appointmentComponent: Appointment,\n          appointmentContentComponent: AppointmentContent\n        }), /*#__PURE__*/_jsx(Resources, {\n          data: resources\n        }), /*#__PURE__*/_jsx(AppointmentTooltip, {\n          showCloseButton: true,\n          showDeleteButton: true,\n          showOpenButton: true\n        }), /*#__PURE__*/_jsx(AppointmentForm, {\n          booleanEditorComponent: BooleanEditor\n        }), /*#__PURE__*/_jsx(DragDropProvider, {})]\n      })\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}